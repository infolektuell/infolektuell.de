---
import { getCollection } from 'astro:content'
import PaginatedBlogLayout from '@components/blog/PaginatedBlogLayout.astro'
import { blogSetting } from '@data/config'
import { sortBlogPosts } from 'src/content.config'

export async function getStaticPaths() {
  // Get all blog posts
  const allPosts = await getCollection('blog', ({ data }) => {
    return import.meta.env.DEV || !data.draft
  })

  // Get categories that have at least one post
  const categoryIds = new Set(allPosts.flatMap((p) => p.data.categories).map((c) => c.id))
  const categories = await getCollection('categories', (c) => categoryIds.has(c.id))

  // Generate paths for each category and its pages
  return categories.flatMap((category) => {
    // Get posts for this category
    const categoryPosts = allPosts.filter((post) => {
      const isPublished = import.meta.env.DEV || !post.data.draft
      const hasCategory = post.data.categories.some((c) => c.id === category.id)
      return isPublished && hasCategory
    })

    // Sort posts by date
    const sortedPosts = sortBlogPosts(categoryPosts)

    const totalPosts = sortedPosts.length
    const totalPages = Math.ceil(totalPosts / blogSetting.postsPerPage)

    // Create paths for all pages except page 1 (which is handled by [...slug].astro)
    return Array.from({ length: totalPages - 1 }, (_, i) => {
      const page = i + 2 // Start from page 2
      const start = (page - 1) * blogSetting.postsPerPage
      const end = start + blogSetting.postsPerPage

      return {
        params: {
          slug: category.id,
          page: String(page),
        },
        props: {
          category,
          page,
          totalPages,
          posts: sortedPosts.slice(start, end),
        },
      }
    })
  })
}

const { category, page, totalPages, posts } = Astro.props

// Redirect page 1 to the main category page
if (page === 1) {
  return Astro.redirect(`/category/${category.id}`)
}
---

<PaginatedBlogLayout
  {posts}
  currentPage={page}
  {totalPages}
  baseUrl={`/category/${category.id}`}
  title={category.data.name}
  subtitle={category.data.description}
  currentCategory={category.id}
/>
